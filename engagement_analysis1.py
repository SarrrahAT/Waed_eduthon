# -*- coding: utf-8 -*-
"""Engagement_Analysis1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qrza06Ijo1c-S4gQEUEDGsSGTmFrqdzp
"""

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

"""load CSV file"""

# Load the CSV file
file_path = '/content/drive/MyDrive/DataSet/userbehaviour_percentage.csv'
data = pd.read_csv(file_path)
# Display the contents of the file
data.head()

"""Pi graph for usage of the app"""

# Filter the data for the 1st user
user_data = data[data['userid'] == 1001]

# Extract the relevant values
screen_time = user_data['Average Screen Time (%)'].values[0]
spent_on_app = user_data['Average Spent on App (%)'].values[0]

# Labels and values for the pie chart
labels = ['Average Screen Time (%)', 'Average Spent on App (%)']
values = [screen_time, spent_on_app]

# Create the pie chart
plt.figure(figsize=(8, 8))
plt.pie(values, labels=labels, autopct='%1.1f%%', startangle=140, colors=['skyblue', 'lightgreen'])
plt.title('Distribution of Screen Time and Time Spent on App for User 1001')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

# Display the pie chart
plt.show()

"""Bar graph for all interaction in application feature"""

# now we need to convert communities to number to count it in the graph
# Initialize an empty list to store the number of communities for each user
community_counts = []

# Iterate over each row in the dataframe
for index, row in data.iterrows():
    # Split the communities string and count the number of communities
    num_communities = len(row['communities'].split(','))
    # Append the count to the list
    community_counts.append(num_communities)

# Add the community counts as a new column in the dataframe
data['Number of Communities'] = community_counts

# Display the updated dataframe
print(data[['userid', 'Number of Communities']])

# Filter the data for user 1001
user_data = data[data['userid'] == 1001]

# Extract the relevant values for user 1001
metrics = {
    'Left Review': user_data['Left Review'].values[0],
    'Number of materials done': user_data['Number of materials done'].values[0],
    'Number of visits': user_data['Number of visits'].values[0],
    'Number of Communities': user_data['Number of Communities'].values[0]
}

# Convert the metrics dictionary to a DataFrame
metrics_df = pd.DataFrame(list(metrics.items()), columns=['Metric', 'Value'])

# Set the style for the plot
sns.set(style="whitegrid")

# Create the bar plot
plt.figure(figsize=(10, 6))
sns.barplot(x='Metric', y='Value', data=metrics_df, palette='viridis')
plt.title('User 1001 Metrics')
plt.ylabel('Value')
plt.xlabel('Metric')

# Display the plot
plt.show()