# -*- coding: utf-8 -*-
"""Student_performance_Analysis_last.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t7KczTMUfkIeJ9LrCfiXyHn69kmT6rCk
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

"""we will set the minimum marks to 50 to pass in a exam"""

passmark = 60

path="/content/drive/MyDrive/DataSet/StudentsPerformance (1).csv"

df = pd.read_csv(path)
# Drop the 'race/ethnicity' column
df = df.drop(columns=['race/ethnicity'])

df = pd.read_csv(path)

# Add the new column 'engaged_with_materials' with example data
df['engaged_with_materials'] = [1, 0, 1, 1, 0] * (len(df) // 5) + [1] * (len(df) % 5)
df.head()

print (df.shape) # Size of data frame
df.describe()

"""

```
# This is formatted as code
```

Explore the Math Score"""

p = sns.countplot(x="math score", data = df, palette="muted")
_ = plt.setp(p.get_xticklabels(), rotation=90)

"""Num of students pass math exam statistic"""

df['Math_PassStatus'] = np.where(df['math score']<passmark, 'F', 'P')
df.Math_PassStatus.value_counts()

""" plot for engagement with materials and Math pass status"""

# Create a count plot for engagement with materials and Math pass status
p2 = sns.countplot(x='engaged_with_materials', data=df, hue='Math_PassStatus', palette='bright')
p2.set_xlabel("Engaged with Materials")
# Add a legend at the bottom explaining 0 and 1
plt.figtext(0.5, -0.1, '0 = student did not engage with materials, 1 = student engaged with materials', ha='center', fontsize=12, color='blue')

# Adjust the layout to make room for the text
plt.subplots_adjust(bottom=0.03)

p2.set_ylabel("Count")
p2.set_title("Student Engagement with Learning Materials vs. Math Pass Status")
plt.show()

#average only math subject

# Assuming the maximum score for math is 100
max_score = 100

# Calculate the percentage for the math scores
df['math_percentage'] = (df['math score'] / max_score) * 100

# Create a count plot of the math percentages
p = sns.countplot(x="math_percentage", data=df, palette="muted")
_ = plt.setp(p.get_xticklabels(), rotation=0)

# Display the plot
plt.show()

# Print the average math percentage
print("Average Math Percentage:", df['math_percentage'].mean())

"""All subject Analysis"""

# Add 'Total_Marks' and 'Percentage' columns
df['Total_Marks'] = df['math score'] + df['Programming score'] + df['DataBase score']
df['Percentage'] = df['Total_Marks'] / 3

# Calculate math percentage (assuming max score is 100)
df['math_percentage'] = (df['math score'] / 100) * 100

# Determine Math_PassStatus (assuming pass is 50 or above)
df['Math_PassStatus'] = df['math score'].apply(lambda x: 'P' if x >= 50 else 'F')

"""Assign the grades"""

# Define the function to get grade
def GetGrade(Percentage, OverAll_PassStatus):
    if OverAll_PassStatus == 'F':
        return 'F'
    if Percentage >= 90:
        return 'A'
    if Percentage >= 80:
        return 'B'
    if Percentage >= 70:
        return 'C'
    if Percentage >= 60:
        return 'D'
    if Percentage >= 50:
        return 'E'
    else:
        return 'F'

"""Add the additional column OverAll_PassStatus"""

# Check if the student has passed in math
df['OverAll_PassStatus'] = df['math score'] >= passmark

# Convert boolean to Pass/Fail
df['OverAll_PassStatus'] = df['OverAll_PassStatus'].map({True: 'Pass', False: 'Fail'})

# Print only the 'math score' and 'OverAll_PassStatus' columns
print(df[['math score', 'OverAll_PassStatus']].head())

# Example data (replace with your actual DataFrame)
math_scores = df['math score']
pass_status = df['OverAll_PassStatus']

# Create a DataFrame for plotting
plot_df = pd.DataFrame({'math score': math_scores, 'OverAll_PassStatus': pass_status})

# Countplot with hue for pass/fail
plt.figure(figsize=(10, 6))  # Adjust the figure size as needed
sns.countplot(x='math score', hue='OverAll_PassStatus', data=plot_df, palette='bright')

# Customize plot labels and title
plt.title('Distribution of Pass/Fail based on Math Scores')
plt.xlabel('Math Score')
plt.ylabel('Count')

# Show plot
plt.legend(title='Pass Status', loc='upper right')
plt.xticks(rotation=90)  # Rotate x-axis labels for better readability if needed
plt.tight_layout()
plt.show()

sns.countplot(x="Grade", data = df, order=['A','B','C','D','E','F'],  palette="muted")
plt.show()

p = sns.countplot(x='engaged_with_materials', data=df, hue='Grade', palette='bright')

# Rotate x-axis labels for better readability
plt.setp(p.get_xticklabels(), rotation=90)

# Add a legend at the bottom explaining 0 and 1
plt.figtext(0.5, -0.1, '0 = student did not engage with materials, 1 = student engaged with materials', ha='center', fontsize=12, color='blue')

# Adjust the layout to make room for the text
plt.subplots_adjust(bottom=0.03)

# Display the plot
plt.show()